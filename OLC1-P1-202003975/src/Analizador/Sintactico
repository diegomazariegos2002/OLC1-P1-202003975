package Analizador;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import clases_lenguaje.TablaDeSimbolos;
import clases_lenguaje.Operacion;
import clases_lenguaje.Instruccion;
import clases_lenguaje.Asignacion;
import clases_lenguaje.Simbolo.Tipo;
import clases_lenguaje.Verificacion;
import clases_lenguaje.Porcentajes;

parser code
{:

    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST;
    /**
     * Lista de clases Asignacion, esta lista la creo para poder almacenar mis
     * expresiones regulares.
     */
    public LinkedList<Instruccion> lista_Expresiones = new LinkedList<>();
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     */ 
    public void syntax_error(Symbol s){
        System.out.println("Error (recuperable) de sintaxis: "+s.value+" Linea: "+(s.right)+" columna: "+(s.left));
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     */ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error (no recuperable) de sintaxis: "+s.value+" Linea: "+(s.right)+" columna: "+(s.left));
    }
    /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<Instruccion> getAST() {
        return AST;
    }
    /**
     * @return the lista_Expresiones
     */
    public LinkedList<Instruccion> getLista_Expresiones() {
        return lista_Expresiones;
    }

    /**
     * @param lista_Expresiones the lista_Expresiones to set
     */
    public void setLista_Expresiones(LinkedList<Instruccion> lista_Expresiones) {
        this.lista_Expresiones = lista_Expresiones;
    }
:}

action code
{:
    String tmp = "";
:}

terminal String coma;
terminal String dospuntos;
terminal String ptcoma;
terminal String flecha;
terminal String llave_abre;
terminal String llave_cierra;
terminal String virgulilla_char;
terminal String punto;
terminal String union;
terminal String kleene;
terminal String positivo;
terminal String interrogacion;
terminal String caracter;
terminal String conj;
terminal String digito;
terminal String id;
terminal String cadena;
terminal String lesinespacio;
terminal String porcentajes;

nonterminal INICIO;
nonterminal LinkedList<Instruccion> INSTRUCCIONES, INSTRUCCIONESENTRADA;
nonterminal Instruccion INSTRUCCION, DECLARACIONCONJ, DECLARACIONEXP, DECLARACIONENTRADA;
nonterminal Operacion DEFINICIONCONJ, DEFINICIONVIRGULILLA, DEFINICIONEXP;
nonterminal LinkedList<Object> DEFINICIONCONCOMAS;
nonterminal Object COMAELEMENTO;

start with INICIO;

INICIO ::= llave_abre INSTRUCCIONES:a llave_cierra {:
            //se guarda el AST, que es la lista principal de instrucciones en la variable
            //AST que se definió dentro del parser
            parser.AST=a;
            System.out.println("Fin analisis sintactico");
    :}
;

INSTRUCCIONES ::= 
                INSTRUCCIONES:a INSTRUCCION:b {:RESULT = a; RESULT.add(b);:}
                | INSTRUCCION:a {:RESULT = new LinkedList<>(); RESULT.add(a);:}
;

INSTRUCCION ::= 
            DECLARACIONCONJ:a {:RESULT = a;:}
            | DECLARACIONEXP:a {:RESULT = a; parser.lista_Expresiones.add(RESULT);:}
            | porcentajes INSTRUCCIONESENTRADA:a {:RESULT = new Porcentajes(a);:}
;

DECLARACIONCONJ ::= conj dospuntos id:a flecha DEFINICIONCONJ:b ptcoma {:RESULT = new Asignacion(a, b, Tipo.CONJUNTO);:}
;

DEFINICIONCONJ ::= 
                    DEFINICIONVIRGULILLA:a {:RESULT = a;:} 
                | DEFINICIONCONCOMAS:a {:RESULT = new Operacion(Operacion.tipo_Operacion.COMA,a);:}
;

DEFINICIONVIRGULILLA ::= 
                        lesinespacio:a virgulilla_char  lesinespacio:b {:RESULT = new Operacion(Operacion.tipo_Operacion.VIRGULILLA, a, b);:}
                        | digito:a virgulilla_char digito:b {:RESULT = new Operacion(Operacion.tipo_Operacion.VIRGULILLA, a, b);:}
                        | caracter:a virgulilla_char caracter:b {:RESULT = new Operacion(Operacion.tipo_Operacion.VIRGULILLA, a, b);:}
;

DEFINICIONCONCOMAS ::= 
                    DEFINICIONCONCOMAS:a coma COMAELEMENTO:b {:RESULT = a; RESULT.add(b);:}
                    | COMAELEMENTO:a {:RESULT = new LinkedList<>(); RESULT.add(a);:}
;

COMAELEMENTO ::= lesinespacio:a {:RESULT = a;:} 
                | digito:a {:RESULT =  a;:}
                | caracter:a {:RESULT = a;:}
;

DECLARACIONEXP ::= id:a flecha DEFINICIONEXP:b ptcoma {:RESULT = new Asignacion(a, b, Tipo.EXPRESION);:};

DEFINICIONEXP ::=  
                    punto DEFINICIONEXP:a DEFINICIONEXP:b {:RESULT = new Operacion(Operacion.tipo_Operacion.CONCATENACION, a, b);:}
                | union DEFINICIONEXP:a DEFINICIONEXP:b {:RESULT = new Operacion(Operacion.tipo_Operacion.OR, a, b);:}
                | kleene DEFINICIONEXP:a {:RESULT = new Operacion(Operacion.tipo_Operacion.KLEENE, a);:} 
                | positivo DEFINICIONEXP:a  {:RESULT = new Operacion(Operacion.tipo_Operacion.POSITIVO, a);:}
                | interrogacion DEFINICIONEXP:a {:RESULT = new Operacion(Operacion.tipo_Operacion.INTERROGACION, a);:}
                | llave_abre id:a llave_cierra {:RESULT = new Operacion(Operacion.tipo_Operacion.IDENTIFICADOR, a);:}
                | cadena:a {:RESULT = new Operacion(Operacion.tipo_Operacion.CADENA, a);:}
;

INSTRUCCIONESENTRADA ::= 
                INSTRUCCIONESENTRADA:a ptcoma DECLARACIONENTRADA:b ptcoma {:RESULT = a; RESULT.add(b);:}
                | DECLARACIONENTRADA:a {:RESULT = new LinkedList<>(); RESULT.add(a);:}
;

DECLARACIONENTRADA ::= id:a dospuntos cadena:b{:RESULT = new Verificacion(a, b);:};
